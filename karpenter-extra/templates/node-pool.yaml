{{- range $k, $v := .Values.nodePools }}
---
apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: {{ $k }}
  labels:
    karpenter-component: node-pool
    {{- include "karpenter.labels" $ | nindent 4 }}
spec:
  # Template section that describes how to template out NodeClaim resources that Karpenter will provision
  # Karpenter will consider this template to be the minimum requirements needed to provision a Node using this NodePool
  # It will overlay this NodePool with Pods that need to schedule to further constrain the NodeClaims
  # Karpenter will provision to launch new Nodes for the cluster
  template:
    metadata:
      # Labels are arbitrary key-values that are applied to all nodes
      {{- with $v.labels }}
      labels:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # Annotations are arbitrary key-values that are applied to all nodes
      {{- with $v.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      # References the Cloud Provider's NodeClass resource, see your cloud provider specific documentation
      nodeClassRef:
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        name: {{ $v.nodeClassName }}
      {{- with $v.taints }}
      # Provisioned nodes will have these taints
      taints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $v.startupTaints }}
      # Provisioned nodes will have these taints, but pods do not need to tolerate these taints to be provisioned by
      # this NodePool. These taints are expected to be temporary and some other entity (e.g. a DaemonSet) is responsible
      # for removing the taint after it has finished initializing the node.
      startupTaints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $v.requirements }}
      # Requirements that constrain the parameters of provisioned nodes.
      # These requirements are combined with pod.spec.topologySpreadConstraints, pod.spec.affinity.nodeAffinity, pod.spec.affinity.podAffinity, and pod.spec.nodeSelector rules.
      # Operators { In, NotIn, Exists, DoesNotExist, Gt, and Lt } are supported.
      # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#operators
      requirements:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- with $v.resourceLimits }}
  # Resource limits constrain the total size of the cluster.
  # Limits prevent Karpenter from creating new instances once the limit is exceeded.
  limits:
    resources:
      {{- toYaml . | nindent 6 }}
  {{- end }}
  # Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes
  # Configuration in this section constrains how aggressive Karpenter can be with performing operations
  # like rolling Nodes due to them hitting their maximum lifetime (expiry) or scaling down nodes to reduce cluster cost
  disruption:
    # Describes which types of Nodes Karpenter should consider for consolidation
    # If using 'WhenUnderutilized', Karpenter will consider all nodes for consolidation and attempt to remove or replace
    # Nodes when it discovers that the Node is underutilized and could be changed to reduce cost.
    # If using `WhenEmpty`, Karpenter will only consider nodes for consolidation that contain no workload pods
    consolidationPolicy: {{ $v.consolidationPolicy }}
    # The amount of time Karpenter should wait after discovering a consolidation decision
    # This value can currently only be set when the consolidationPolicy is 'WhenEmpty'
    # You can choose to disable consolidation entirely by setting the string value 'Never' here
    consolidateAfter: {{ $v.consolidateAfter }}
    # The amount of time a Node can live on the cluster before being removed
    # Avoiding long-running Nodes helps to reduce security vulnerabilities as well as to reduce the chance of issues
    # that can plague Nodes with long uptimes such as file fragmentation or memory leaks from system processes
    # You can choose to disable expiration entirely by setting the string value 'Never' here
    expireAfter: {{ $v.expireAfter }}
  weight: {{ $v.weight }}
{{- end }}
